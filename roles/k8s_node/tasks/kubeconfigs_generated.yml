- name: kube-proxy kubeconfig
  vars:
    _k8s_user: system:kube-proxy
    _kubeconfig: '{{ k8s_node__kubeconfig_dir }}/kube-proxy.kubeconfig'
  block:
  - name: Check if kube-proxy kubeconfig exists
    stat:
      path: '{{ _kubeconfig }}'
    register: _stat_result
  - name: Cluster is set in kube-proxy kubeconfig
    command: kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_node__pki_dir }}/{{ pki_tasks__fetch_k8s_ca_crt.dest | basename }} --embed-certs=true --server=https://{{ k8s__advertise_address }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Client certificate is set in kube-proxy kubeconfig
    command: kubectl config set-credentials {{ _k8s_user }} --client-certificate={{ k8s_node__pki_dir }}/{{ pki_tasks__fetch_kube_proxy_crt.dest | basename }} --client-key={{ k8s_node__pki_dir }}/{{ pki_tasks__fetch_kube_proxy_key.dest | basename }} --embed-certs=true --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is set in kube-proxy kubeconfig
    command: kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is enabled in kube-proxy kubeconfig
    command: kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Only root can read kube-proxy kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600

# Bootstrap kubeconfig should be retrieved from cluster-info rather than being created here
- name: Bootstrap kubeconfig
  vars:
    _k8s_user: kubelet-bootstrap
    _kubeconfig: '{{ k8s_node__kubeconfig_dir }}/bootstrap.kubeconfig'
  block:
  - name: Check if bootstrap kubeconfig exists
    stat:
      path: '{{ _kubeconfig }}'
    register: _stat_result
  - name: Cluster is set in bootstrap kubeconfig
    command: kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_node__pki_dir }}/{{ pki_tasks__fetch_k8s_ca_crt.dest | basename }} --embed-certs=true --server=https://{{ k8s__advertise_address }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is set in bootstrap kubeconfig
    command: kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is enabled in bootstrap kubeconfig
    command: kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Bootstrap token is loaded
    command: cat {{ k8s__local_shared_dir }}/bootstrap_token
    delegate_to: 127.0.0.1
    register: _bootstrap_token
    changed_when: False
  - name: Check if bootstrap token is set in bootstrap kubeconfig
    command: cat {{ _kubeconfig }}
    register: _check_result
    changed_when: False
  - name: Bootstrap token is set in bootstrap kubeconfig
    command: kubectl config set-credentials kubelet-bootstrap --token={{ _bootstrap_token.stdout }} --kubeconfig={{ _kubeconfig }}
    when: not _bootstrap_token.stdout in _check_result.stdout
  - name: Only root can read bootstrap kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600
