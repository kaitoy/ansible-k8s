- name: k8s kubeconfig dir exists
  file:
    path: '{{ k8s_master__kubeconfig_dir }}'
    owner: root
    group: root
    mode: 0755
    state: directory

- name: kube-controller-manager kubeconfig
  vars:
    _k8s_user: system:kube-controller-manager
    _kubeconfig: '{{ k8s_master__kubeconfig_dir }}/kube-controller-manager.kubeconfig'
  block:
  - name: Check if kube-controller-manager kubeconfig exists
    stat:
      path: '{{ _kubeconfig }}'
    register: _stat_result
  - name: Cluster is set in kube-controller-manager kubeconfig
    command: kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_k8s_ca_crt.dest | basename }} --embed-certs=true --server=https://{{ k8s__advertise_address }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Client certificate is set in kube-controller-manager kubeconfig
    command: kubectl config set-credentials {{ _k8s_user }} --client-certificate={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_kube_controller_manager_crt.dest | basename }} --client-key={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_kube_controller_manager_key.dest | basename }} --embed-certs=true --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is set in kube-controller-manager kubeconfig
    command: kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is enabled in kube-controller-manager kubeconfig
    command: kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Only user 'kubernetes' can read kube-controller-manager kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: kubernetes
      group: kubernetes
      mode: 0600

- name: kube-scheduler kubeconfig
  vars:
    _k8s_user: system:kube-scheduler
    _kubeconfig: '{{ k8s_master__kubeconfig_dir }}/kube-scheduler.kubeconfig'
  block:
  - name: Check if kube-scheduler kubeconfig exists
    stat:
      path: '{{ _kubeconfig }}'
    register: _stat_result
  - name: Cluster is set in kube-scheduler kubeconfig
    command: kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_k8s_ca_crt.dest | basename }} --embed-certs=true --server=https://{{ k8s__advertise_address }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Client certificate is set in kube-scheduler kubeconfig
    command: kubectl config set-credentials {{ _k8s_user }} --client-certificate={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_kube_scheduler_crt.dest | basename }} --client-key={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_kube_scheduler_key.dest | basename }} --embed-certs=true --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is set in kube-scheduler kubeconfig
    command: kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is enabled in kube-scheduler kubeconfig
    command: kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Only user 'kubernetes' can read kube-scheduler kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: kubernetes
      group: kubernetes
      mode: 0600

- name: admin kubeconfig
  vars:
    _k8s_user: kubernetes-admin
    _kubeconfig: '{{ k8s_master__kubeconfig_dir }}/admin.kubeconfig'
  block:
  - name: Check if admin kubeconfig exists
    stat:
      path: '{{ _kubeconfig }}'
    register: _stat_result
  - name: Cluster is set in admin kubeconfig
    command: kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_k8s_ca_crt.dest | basename }} --embed-certs=true --server=https://{{ k8s__advertise_address }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Client certificate is set in admin kubeconfig
    command: kubectl config set-credentials {{ _k8s_user }} --client-certificate={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_admin_crt.dest | basename }} --client-key={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_admin_key.dest | basename }} --embed-certs=true --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is set in admin kubeconfig
    command: kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is enabled in admin kubeconfig
    command: kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Only user 'kube-admin' can read admin kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: kube-admin
      group: kube-admin
      mode: 0600
  - name:  /root/.kube/ exists
    file:
      path: /root/.kube/
      owner: root
      group: root
      mode: 0700
      state: directory
  - name: admin kubeconfig is installed for root
    file:
      path: /root/.kube/config
      src: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600
      state: link
  - name:  /home/kube-admin/.kube exists
    file:
      path: /home/kube-admin/.kube
      owner: kube-admin
      group: kube-admin
      mode: 0700
      state: directory
  - name: admin kubeconfig is installed for kube-admin
    file:
      path: /home/kube-admin/.kube/config
      src: '{{ _kubeconfig }}'
      owner: kube-admin
      group: kube-admin
      mode: 0600
      state: link

- name: Bootstrap kubeconfig
  vars:
    _k8s_user: kubelet-bootstrap
    _kubeconfig: '{{ k8s_master__kubeconfig_dir }}/bootstrap.kubeconfig'
  block:
  - name: Check if bootstrap kubeconfig exists
    stat:
      path: '{{ _kubeconfig }}'
    register: _stat_result
  - name: Cluster is set in bootstrap kubeconfig
    command: kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_master__pki_dir }}/{{ pki_tasks__fetch_k8s_ca_crt.dest | basename }} --embed-certs=true --server=https://{{ k8s__advertise_address }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is set in bootstrap kubeconfig
    command: kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Context is enabled in bootstrap kubeconfig
    command: kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}
    when: not _stat_result.stat.exists
  - name: Only root can read bootstrap kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600
